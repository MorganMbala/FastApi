<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.frontendjava&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.frontendjava&quot;&#10;        minSdk = 29&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofitGson)&#10;    implementation(libs.okhttpLogging)&#10;    implementation(libs.recyclerview)&#10;    implementation(libs.cardview)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.frontendjava&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.frontendjava&quot;&#10;        minSdk = 29&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofitGson)&#10;    implementation(libs.okhttpLogging)&#10;    implementation(libs.recyclerview)&#10;    implementation(libs.cardview)&#10;    implementation(libs.glide)&#10;    annotationProcessor(libs.glideCompiler)&#10;    implementation(libs.swiperefreshlayout)&#10;    implementation(libs.shimmer)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/frontendjava/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/frontendjava/MainActivity.java" />
              <option name="originalContent" value="package com.example.frontendjava;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.frontendjava.api.ActeurApiService;&#10;import com.example.frontendjava.api.RetrofitClient;&#10;import com.example.frontendjava.model.Acteur;&#10;import com.example.frontendjava.model.ActeurUpdate;&#10;import com.example.frontendjava.ui.ActeurAdapter;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class MainActivity extends AppCompatActivity implements ActeurAdapter.OnActeurInteractionListener {&#10;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private TextView textError;&#10;    private ActeurAdapter adapter;&#10;    private FloatingActionButton fabAdd;&#10;    private ActeurApiService service;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        recyclerView = findViewById(R.id.recyclerActeurs);&#10;        progressBar = findViewById(R.id.progressBar);&#10;        textError = findViewById(R.id.textError);&#10;        fabAdd = findViewById(R.id.fabAdd);&#10;        swipeRefresh = findViewById(R.id.swipeRefresh);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new ActeurAdapter();&#10;        adapter.setListener(this);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        service = RetrofitClient.getActeurService();&#10;&#10;        fabAdd.setOnClickListener(v -&gt; openActeurDialog(null));&#10;        swipeRefresh.setOnRefreshListener(this::fetchActeurs);&#10;&#10;    }&#10;&#10;    private void fetchActeurs() {&#10;        // Show progress bar only if not a manual refresh gesture&#10;        if (!swipeRefresh.isRefreshing()) {&#10;            progressBar.setVisibility(View.VISIBLE);&#10;        progressBar.setVisibility(View.VISIBLE);&#10;            public void onResponse(Call&lt;List&lt;Acteur&gt;&gt; call, Response&lt;List&lt;Acteur&gt;&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                swipeRefresh.setRefreshing(false);&#10;                if (response.isSuccessful()) {&#10;                    adapter.setData(response.body());&#10;                } else {&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;List&lt;Acteur&gt;&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                swipeRefresh.setRefreshing(false);&#10;                showError(&quot;Erreur réseau: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void openActeurDialog(Acteur existing) {&#10;        EditText inputId = dialogView.findViewById(R.id.inputId);&#10;        EditText inputName = dialogView.findViewById(R.id.inputName);&#10;        EditText inputBio = dialogView.findViewById(R.id.inputBio);&#10;        EditText inputPicture = dialogView.findViewById(R.id.inputPicture);&#10;&#10;        boolean isEdit = existing != null;&#10;        if (isEdit) {&#10;            inputId.setText(String.valueOf(existing.getId()));&#10;            inputId.setEnabled(false); // id not editable&#10;            inputName.setText(existing.getName());&#10;            inputBio.setText(existing.getBio());&#10;            inputPicture.setText(existing.getPicture());&#10;        }&#10;&#10;        AlertDialog dialog = new AlertDialog.Builder(this)&#10;                .setTitle(isEdit ? &quot;Modifier acteur&quot; : &quot;Nouvel acteur&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(isEdit ? &quot;Mettre à jour&quot; : &quot;Créer&quot;, null) // set later to prevent auto-dismiss on validation errors&#10;                .setNegativeButton(&quot;Annuler&quot;, (d, w) -&gt; d.dismiss())&#10;                .create();&#10;&#10;        dialog.setOnShowListener(d -&gt; {&#10;            dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(v -&gt; {&#10;                String idStr = inputId.getText().toString().trim();&#10;                String name = inputName.getText().toString().trim();&#10;                String bio = inputBio.getText().toString().trim();&#10;                String picture = inputPicture.getText().toString().trim();&#10;&#10;                if (!isEdit &amp;&amp; idStr.isEmpty()) { inputId.setError(&quot;Requis&quot;); return; }&#10;                if (name.isEmpty()) { inputName.setError(&quot;Requis&quot;); return; }&#10;                if (bio.isEmpty()) { inputBio.setError(&quot;Requis&quot;); return; }&#10;                if (picture.isEmpty()) { inputPicture.setError(&quot;Requis&quot;); return; }&#10;&#10;                if (isEdit) {&#10;                    updateActeur(existing.getId(), new ActeurUpdate(name, bio, picture), dialog);&#10;                } else {&#10;                    int id;&#10;                    try { id = Integer.parseInt(idStr); } catch (NumberFormatException e) { inputId.setError(&quot;Nombre&quot;); return; }&#10;                    createActeur(new Acteur(id, name, bio, picture), dialog);&#10;                }&#10;            });&#10;        });&#10;&#10;        dialog.show();&#10;    }&#10;&#10;    private void createActeur(Acteur acteur, AlertDialog dialog) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.createActeur(acteur).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Créé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 409) {&#10;                    Toast.makeText(MainActivity.this, &quot;ID existe déjà&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateActeur(int id, ActeurUpdate update, AlertDialog dialog) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.updateActeur(id, update).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Mis à jour&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Introuvable&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void confirmDelete(Acteur acteur) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Supprimer&quot;)&#10;                .setMessage(&quot;Supprimer l'acteur &quot; + acteur.getName() + &quot; ?&quot;)&#10;                .setPositiveButton(&quot;Oui&quot;, (d, w) -&gt; deleteActeur(acteur.getId()))&#10;                .setNegativeButton(&quot;Non&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void deleteActeur(int id) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.deleteActeur(id).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    Toast.makeText(MainActivity.this, &quot;Supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Déjà supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showError(String msg) {&#10;        textError.setText(msg);&#10;        textError.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    // Adapter Callbacks&#10;    @Override&#10;    public void onEdit(Acteur acteur) {&#10;        openActeurDialog(acteur);&#10;    }&#10;&#10;    @Override&#10;    public void onDelete(Acteur acteur) {&#10;        confirmDelete(acteur);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.frontendjava;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.SearchView;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.recyclerview.widget.DefaultItemAnimator;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.example.frontendjava.api.ActeurApiService;&#10;import com.example.frontendjava.api.RetrofitClient;&#10;import com.example.frontendjava.model.Acteur;&#10;import com.example.frontendjava.model.ActeurUpdate;&#10;import com.example.frontendjava.ui.ActeurAdapter;&#10;import com.facebook.shimmer.ShimmerFrameLayout;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class MainActivity extends AppCompatActivity implements ActeurAdapter.OnActeurInteractionListener {&#10;&#10;    private RecyclerView recyclerView;&#10;    private TextView textError;&#10;    private ActeurAdapter adapter;&#10;    private FloatingActionButton fabAdd;&#10;    private ActeurApiService service;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private ShimmerFrameLayout shimmer;&#10;    private Toolbar toolbar;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        recyclerView = findViewById(R.id.recyclerActeurs);&#10;        textError = findViewById(R.id.textError);&#10;        fabAdd = findViewById(R.id.fabAdd);&#10;        swipeRefresh = findViewById(R.id.swipeRefresh);&#10;        shimmer = findViewById(R.id.shimmerContainer);&#10;        toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new ActeurAdapter();&#10;        adapter.setListener(this);&#10;        recyclerView.setAdapter(adapter);&#10;        DefaultItemAnimator animator = new DefaultItemAnimator();&#10;        animator.setAddDuration(180);&#10;        animator.setRemoveDuration(140);&#10;        animator.setMoveDuration(200);&#10;        animator.setChangeDuration(200);&#10;        recyclerView.setItemAnimator(animator);&#10;&#10;        service = RetrofitClient.getActeurService();&#10;&#10;        fabAdd.setOnClickListener(v -&gt; openActeurDialog(null));&#10;        swipeRefresh.setOnRefreshListener(() -&gt; fetchActeurs());&#10;&#10;        // Apply status bar inset to toolbar so title sits lower&#10;        ViewCompat.setOnApplyWindowInsetsListener(toolbar, (v, insets) -&gt; {&#10;            int top = insets.getInsets(WindowInsetsCompat.Type.statusBars()).top;&#10;            v.setPadding(v.getPaddingLeft(), top + dpToPx(4), v.getPaddingRight(), v.getPaddingBottom());&#10;            return insets;&#10;        });&#10;&#10;        fetchActeurs();&#10;    }&#10;&#10;    private int dpToPx(int dp) {&#10;        return Math.round(getResources().getDisplayMetrics().density * dp);&#10;    }&#10;&#10;    private void startLoadingSkeleton() {&#10;        if (!swipeRefresh.isRefreshing()) {&#10;            shimmer.setVisibility(View.VISIBLE);&#10;            shimmer.startShimmer();&#10;        }&#10;    }&#10;&#10;    private void stopLoadingSkeleton() {&#10;        shimmer.stopShimmer();&#10;        shimmer.setVisibility(View.GONE);&#10;        swipeRefresh.setRefreshing(false);&#10;    }&#10;&#10;    private void updateCounter(int count) {&#10;        if (toolbar != null) {&#10;            toolbar.setTitle(&quot;Acteurs (&quot; + count + &quot;)&quot;);&#10;        }&#10;    }&#10;&#10;    private void fetchActeurs() {&#10;        startLoadingSkeleton();&#10;        textError.setVisibility(View.GONE);&#10;        service.getActeurs().enqueue(new Callback&lt;List&lt;Acteur&gt;&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;List&lt;Acteur&gt;&gt; call, @NonNull Response&lt;List&lt;Acteur&gt;&gt; response) {&#10;                stopLoadingSkeleton();&#10;                if (response.isSuccessful()) {&#10;                    List&lt;Acteur&gt; list = response.body();&#10;                    adapter.setData(list);&#10;                    updateCounter(list == null ? 0 : list.size());&#10;                } else {&#10;                    showError(&quot;Réponse serveur: &quot; + response.code());&#10;                    updateCounter(0);&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;List&lt;Acteur&gt;&gt; call, @NonNull Throwable t) {&#10;                stopLoadingSkeleton();&#10;                showError(&quot;Erreur réseau: &quot; + t.getMessage());&#10;                updateCounter(0);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void openActeurDialog(Acteur existing) {&#10;        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_acteur, null, false);&#10;        EditText inputId = dialogView.findViewById(R.id.inputId);&#10;        EditText inputName = dialogView.findViewById(R.id.inputName);&#10;        EditText inputBio = dialogView.findViewById(R.id.inputBio);&#10;        EditText inputPicture = dialogView.findViewById(R.id.inputPicture);&#10;&#10;        boolean isEdit = existing != null;&#10;        if (isEdit) {&#10;            inputId.setText(String.valueOf(existing.getId()));&#10;            inputId.setEnabled(false); // id not editable&#10;            inputName.setText(existing.getName());&#10;            inputBio.setText(existing.getBio());&#10;            inputPicture.setText(existing.getPicture());&#10;        }&#10;&#10;        AlertDialog dialog = new AlertDialog.Builder(this)&#10;                .setTitle(isEdit ? &quot;Modifier acteur&quot; : &quot;Nouvel acteur&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(isEdit ? &quot;Mettre à jour&quot; : &quot;Créer&quot;, null) // set later to prevent auto-dismiss on validation errors&#10;                .setNegativeButton(&quot;Annuler&quot;, (d, w) -&gt; d.dismiss())&#10;                .create();&#10;&#10;        dialog.setOnShowListener(d -&gt; {&#10;            dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(v -&gt; {&#10;                String idStr = inputId.getText().toString().trim();&#10;                String name = inputName.getText().toString().trim();&#10;                String bio = inputBio.getText().toString().trim();&#10;                String picture = inputPicture.getText().toString().trim();&#10;&#10;                if (!isEdit &amp;&amp; idStr.isEmpty()) { inputId.setError(&quot;Requis&quot;); return; }&#10;                if (name.isEmpty()) { inputName.setError(&quot;Requis&quot;); return; }&#10;                if (bio.isEmpty()) { inputBio.setError(&quot;Requis&quot;); return; }&#10;                if (picture.isEmpty()) { inputPicture.setError(&quot;Requis&quot;); return; }&#10;&#10;                if (isEdit) {&#10;                    updateActeur(existing.getId(), new ActeurUpdate(name, bio, picture), dialog);&#10;                } else {&#10;                    int id;&#10;                    try { id = Integer.parseInt(idStr); } catch (NumberFormatException e) { inputId.setError(&quot;Nombre&quot;); return; }&#10;                    createActeur(new Acteur(id, name, bio, picture), dialog);&#10;                }&#10;            });&#10;        });&#10;&#10;        dialog.show();&#10;    }&#10;&#10;    private void createActeur(Acteur acteur, AlertDialog dialog) {&#10;        startLoadingSkeleton();&#10;        service.createActeur(acteur).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;Acteur&gt; call, @NonNull Response&lt;Acteur&gt; response) {&#10;                stopLoadingSkeleton();&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Créé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 409) {&#10;                    Toast.makeText(MainActivity.this, &quot;ID existe déjà&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;Acteur&gt; call, @NonNull Throwable t) {&#10;                stopLoadingSkeleton();&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateActeur(int id, ActeurUpdate update, AlertDialog dialog) {&#10;        startLoadingSkeleton();&#10;        service.updateActeur(id, update).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;Acteur&gt; call, @NonNull Response&lt;Acteur&gt; response) {&#10;                stopLoadingSkeleton();&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Mis à jour&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Introuvable&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;Acteur&gt; call, @NonNull Throwable t) {&#10;                stopLoadingSkeleton();&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void confirmDelete(Acteur acteur) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Supprimer&quot;)&#10;                .setMessage(&quot;Supprimer l'acteur &quot; + acteur.getName() + &quot; ?&quot;)&#10;                .setPositiveButton(&quot;Oui&quot;, (d, w) -&gt; deleteActeur(acteur.getId()))&#10;                .setNegativeButton(&quot;Non&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void deleteActeur(int id) {&#10;        startLoadingSkeleton();&#10;        service.deleteActeur(id).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;Acteur&gt; call, @NonNull Response&lt;Acteur&gt; response) {&#10;                stopLoadingSkeleton();&#10;                if (response.isSuccessful()) {&#10;                    Toast.makeText(MainActivity.this, &quot;Supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Déjà supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;Acteur&gt; call, @NonNull Throwable t) {&#10;                stopLoadingSkeleton();&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showError(String msg) {&#10;        textError.setText(msg);&#10;        textError.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    // Search Menu&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.menu_main, menu);&#10;        MenuItem item = menu.findItem(R.id.action_search);&#10;        SearchView searchView = (SearchView) item.getActionView();&#10;        searchView.setQueryHint(&quot;Rechercher...&quot;);&#10;        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;            @Override public boolean onQueryTextSubmit(String query) { adapter.filter(query); return true; }&#10;            @Override public boolean onQueryTextChange(String newText) { adapter.filter(newText); return true; }&#10;        });&#10;        item.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {&#10;            @Override public boolean onMenuItemActionExpand(MenuItem item) { return true; }&#10;            @Override public boolean onMenuItemActionCollapse(MenuItem item) { adapter.filter(&quot;&quot;); return true; }&#10;        });&#10;        return true;&#10;    }&#10;&#10;    // Adapter Callbacks&#10;    @Override&#10;    public void onEdit(Acteur acteur) { openActeurDialog(acteur); }&#10;    @Override&#10;    public void onDelete(Acteur acteur) { confirmDelete(acteur); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/frontendjava/ui/ActeurAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/frontendjava/ui/ActeurAdapter.java" />
              <option name="originalContent" value="package com.example.frontendjava.ui;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.frontendjava.R;&#10;import com.example.frontendjava.model.Acteur;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ActeurAdapter extends RecyclerView.Adapter&lt;ActeurAdapter.ActeurViewHolder&gt; {&#10;&#10;    public interface OnActeurInteractionListener {&#10;        void onEdit(Acteur acteur);&#10;        void onDelete(Acteur acteur);&#10;    }&#10;&#10;    private final List&lt;Acteur&gt; data = new ArrayList&lt;&gt;();&#10;    private OnActeurInteractionListener listener;&#10;&#10;    public void setListener(OnActeurInteractionListener l) { this.listener = l; }&#10;&#10;    public void setData(List&lt;Acteur&gt; nouveaux) {&#10;        data.clear();&#10;        if (nouveaux != null) {&#10;            data.addAll(nouveaux);&#10;        }&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ActeurViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_acteur, parent, false);&#10;        return new ActeurViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ActeurViewHolder holder, int position) {&#10;        Acteur a = data.get(position);&#10;        holder.textName.setText(a.getName());&#10;        holder.textBio.setText(a.getBio());&#10;        // Load image&#10;            if (listener != null) listener.onEdit(a);&#10;        });&#10;        holder.itemView.setOnLongClickListener(v -&gt; {&#10;            if (listener != null) listener.onDelete(a);&#10;            return true;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return data.size();&#10;    }&#10;&#10;    static class ActeurViewHolder extends RecyclerView.ViewHolder {&#10;        TextView textName;&#10;        TextView textBio;&#10;        ImageView imagePicture;&#10;        ActeurViewHolder(@NonNull View itemView) {&#10;            textName = itemView.findViewById(R.id.textName);&#10;            textBio = itemView.findViewById(R.id.textBio);&#10;            imagePicture = itemView.findViewById(R.id.imagePicture);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.frontendjava.ui;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.DiffUtil;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.example.frontendjava.R;&#10;import com.example.frontendjava.model.Acteur;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ActeurAdapter extends RecyclerView.Adapter&lt;ActeurAdapter.ActeurViewHolder&gt; {&#10;&#10;    public interface OnActeurInteractionListener {&#10;        void onEdit(Acteur acteur);&#10;        void onDelete(Acteur acteur);&#10;    }&#10;&#10;    private final List&lt;Acteur&gt; data = new ArrayList&lt;&gt;();&#10;    private final List&lt;Acteur&gt; full = new ArrayList&lt;&gt;();&#10;    private OnActeurInteractionListener listener;&#10;&#10;    public void setListener(OnActeurInteractionListener l) { this.listener = l; }&#10;&#10;    public void setData(List&lt;Acteur&gt; nouveaux) {&#10;        full.clear();&#10;        if (nouveaux != null) full.addAll(nouveaux);&#10;        applyFilterInternal(currentQuery);&#10;    }&#10;&#10;    private String currentQuery = &quot;&quot;;&#10;&#10;    public void filter(String query) {&#10;        if (query == null) query = &quot;&quot;;&#10;        currentQuery = query.trim().toLowerCase();&#10;        applyFilterInternal(currentQuery);&#10;    }&#10;&#10;    private void applyFilterInternal(String q) {&#10;        List&lt;Acteur&gt; newList;&#10;        if (q.isEmpty()) {&#10;            newList = new ArrayList&lt;&gt;(full);&#10;        } else {&#10;            newList = new ArrayList&lt;&gt;();&#10;            for (Acteur a : full) {&#10;                if (String.valueOf(a.getId()).contains(q) ||&#10;                        (a.getName() != null &amp;&amp; a.getName().toLowerCase().contains(q)) ||&#10;                        (a.getBio() != null &amp;&amp; a.getBio().toLowerCase().contains(q))) {&#10;                    newList.add(a);&#10;                }&#10;            }&#10;        }&#10;        DiffUtil.DiffResult diff = DiffUtil.calculateDiff(new DiffUtil.Callback() {&#10;            @Override public int getOldListSize() { return data.size(); }&#10;            @Override public int getNewListSize() { return newList.size(); }&#10;            @Override public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {&#10;                return data.get(oldItemPosition).getId() == newList.get(newItemPosition).getId();&#10;            }&#10;            @Override public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {&#10;                Acteur o = data.get(oldItemPosition); Acteur n = newList.get(newItemPosition);&#10;                return o.getName().equals(n.getName()) &amp;&amp; o.getBio().equals(n.getBio()) &amp;&amp; ((o.getPicture()==null?&quot;&quot;:o.getPicture()).equals(n.getPicture()==null?&quot;&quot;:n.getPicture()));&#10;            }&#10;        });&#10;        data.clear();&#10;        data.addAll(newList);&#10;        diff.dispatchUpdatesTo(this);&#10;    }&#10;&#10;    public Acteur getItem(int position){ return data.get(position); }&#10;&#10;    @Override&#10;    public long getItemId(int position) { return data.get(position).getId(); }&#10;&#10;    public ActeurAdapter(){ setHasStableIds(true); }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ActeurViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_acteur, parent, false);&#10;        return new ActeurViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ActeurViewHolder holder, int position) {&#10;        Acteur a = data.get(position);&#10;        holder.textName.setText(a.getName());&#10;        holder.textBio.setText(a.getBio());&#10;        // Alternating neutral backgrounds (no violet)&#10;        int bgRes = (position % 2 == 0) ? R.color.gray200 : R.color.gray100;&#10;        holder.card.setCardBackgroundColor(ContextCompat.getColor(holder.card.getContext(), bgRes));&#10;        // Load image&#10;        String url = a.getPicture();&#10;        if (url == null || url.trim().isEmpty()) {&#10;            holder.imagePicture.setImageResource(R.drawable.placeholder_actor);&#10;        } else {&#10;            Glide.with(holder.imagePicture.getContext())&#10;                    .load(url)&#10;                    .placeholder(R.drawable.placeholder_actor)&#10;                    .error(R.drawable.placeholder_actor)&#10;                    .centerCrop()&#10;                    .into(holder.imagePicture);&#10;        }&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) listener.onEdit(a);&#10;        });&#10;        holder.itemView.setOnLongClickListener(v -&gt; {&#10;            if (listener != null) listener.onDelete(a);&#10;            return true;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return data.size();&#10;    }&#10;&#10;    static class ActeurViewHolder extends RecyclerView.ViewHolder {&#10;        TextView textName;&#10;        TextView textBio;&#10;        ImageView imagePicture;&#10;        MaterialCardView card;&#10;        ActeurViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            card = (MaterialCardView) itemView; // root&#10;            textName = itemView.findViewById(R.id.textName);&#10;            textBio = itemView.findViewById(R.id.textBio);&#10;            imagePicture = itemView.findViewById(R.id.imagePicture);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/divider_mono.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/divider_mono.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;size android:height=&quot;1dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;@color/colorBorder&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/placeholder_actor.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/placeholder_actor.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;72dp&quot;&#10;    android:height=&quot;72dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#BDBDBD&quot;&#10;        android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-3.33,0 -10,1.67 -10,5v1c0,0.55 0.45,1 1,1h18c0.55,0 1,-0.45 1,-1v-1c0,-3.33 -6.67,-5 -10,-5z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/skeleton_block.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/skeleton_block.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;6dp&quot; /&gt;&#10;    &lt;size android:height=&quot;12dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;@color/gray200&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;@android:style/Widget.DeviceDefault.Light.ProgressBar.Large&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;/&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerActeurs&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        tools:listitem=&quot;@layout/item_acteur&quot;/&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textError&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        tools:text=&quot;Erreur de chargement&quot;/&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabAdd&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:contentDescription=&quot;Ajouter&quot;&#10;        app:srcCompat=&quot;@android:drawable/ic_input_add&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/colorBackground&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/colorBackground&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.Material3.ActionBar&quot;&#10;        app:title=&quot;Acteurs&quot;&#10;        app:titleCentered=&quot;true&quot;&#10;        app:titleTextColor=&quot;@color/colorOnBackground&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- Shimmer skeleton container --&gt;&#10;    &lt;com.facebook.shimmer.ShimmerFrameLayout&#10;        android:id=&quot;@+id/shimmerContainer&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:paddingStart=&quot;12dp&quot;&#10;        android:paddingEnd=&quot;12dp&quot;&#10;        android:paddingTop=&quot;8dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&gt;&#10;            &lt;include layout=&quot;@layout/item_acteur_skeleton&quot; /&gt;&#10;            &lt;include layout=&quot;@layout/item_acteur_skeleton&quot; /&gt;&#10;            &lt;include layout=&quot;@layout/item_acteur_skeleton&quot; /&gt;&#10;            &lt;include layout=&quot;@layout/item_acteur_skeleton&quot; /&gt;&#10;            &lt;include layout=&quot;@layout/item_acteur_skeleton&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.facebook.shimmer.ShimmerFrameLayout&gt;&#10;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;        android:id=&quot;@+id/swipeRefresh&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recyclerActeurs&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;12dp&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;80dp&quot;&#10;            tools:listitem=&quot;@layout/item_acteur&quot;/&gt;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textError&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@android:color/holo_red_light&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        tools:text=&quot;Erreur de chargement&quot;/&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabAdd&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:contentDescription=&quot;Ajouter&quot;&#10;        app:srcCompat=&quot;@android:drawable/ic_input_add&quot;&#10;        app:tint=&quot;@color/colorOnPrimary&quot;&#10;        app:backgroundTint=&quot;@color/colorPrimary&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_acteur.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_acteur.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardElevation=&quot;0dp&quot;&#10;    app:strokeColor=&quot;@color/colorBorder&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imagePicture&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:contentDescription=&quot;Photo acteur&quot;&#10;            android:src=&quot;@drawable/placeholder_actor&quot;&#10;            android:background=&quot;@color/gray200&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:clipToOutline=&quot;true&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_weight=&quot;1&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textName&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;19sp&quot;&#10;                android:letterSpacing=&quot;0.06&quot;&#10;                android:textAllCaps=&quot;true&quot;&#10;                android:textColor=&quot;@color/colorOnSurface&quot;&#10;                android:text=&quot;Nom&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textBio&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:textColor=&quot;@color/gray600&quot;&#10;                android:text=&quot;Bio&quot;&#10;                android:letterSpacing=&quot;0.02&quot;&#10;                android:lineSpacingExtra=&quot;2dp&quot;&#10;                android:maxLines=&quot;3&quot;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardElevation=&quot;0dp&quot;&#10;    app:strokeColor=&quot;@color/colorBorder&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&#10;    app:cardBackgroundColor=&quot;@color/gray200&quot;&#10;    app:rippleColor=&quot;@color/colorRipple&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imagePicture&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:contentDescription=&quot;Photo acteur&quot;&#10;            android:src=&quot;@drawable/placeholder_actor&quot;&#10;            android:background=&quot;@color/gray300&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:clipToOutline=&quot;true&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_weight=&quot;1&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textName&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;19sp&quot;&#10;                android:letterSpacing=&quot;0.06&quot;&#10;                android:textAllCaps=&quot;true&quot;&#10;                android:textColor=&quot;@color/colorOnSurface&quot;&#10;                android:text=&quot;Nom&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textBio&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:textColor=&quot;@color/gray600&quot;&#10;                android:text=&quot;Bio&quot;&#10;                android:letterSpacing=&quot;0.02&quot;&#10;                android:lineSpacingExtra=&quot;2dp&quot;&#10;                android:maxLines=&quot;3&quot;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_acteur_skeleton.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_acteur_skeleton.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardElevation=&quot;0dp&quot;&#10;    app:strokeColor=&quot;@color/colorBorder&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;View&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:background=&quot;@drawable/skeleton_block&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;160dp&quot;&#10;                android:layout_height=&quot;16dp&quot;&#10;                android:background=&quot;@drawable/skeleton_block&quot; /&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;220dp&quot;&#10;                android:layout_height=&quot;12dp&quot;&#10;                android:layout_marginTop=&quot;10dp&quot;&#10;                android:background=&quot;@drawable/skeleton_block&quot; /&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;180dp&quot;&#10;                android:layout_height=&quot;12dp&quot;&#10;                android:layout_marginTop=&quot;6dp&quot;&#10;                android:background=&quot;@drawable/skeleton_block&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_main.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_search&quot;&#10;        android:title=&quot;Search&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_search&quot;&#10;        app:showAsAction=&quot;always|collapseActionView&quot;&#10;        app:actionViewClass=&quot;androidx.appcompat.widget.SearchView&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Night monochrome palette (inverted emphasis) --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;gray50&quot;&gt;#121212&lt;/color&gt;&#10;    &lt;color name=&quot;gray100&quot;&gt;#1A1A1A&lt;/color&gt;&#10;    &lt;color name=&quot;gray200&quot;&gt;#222222&lt;/color&gt;&#10;    &lt;color name=&quot;gray300&quot;&gt;#2C2C2C&lt;/color&gt;&#10;    &lt;color name=&quot;gray600&quot;&gt;#9E9E9E&lt;/color&gt;&#10;    &lt;color name=&quot;gray800&quot;&gt;#D0D0D0&lt;/color&gt;&#10;    &lt;color name=&quot;gray900&quot;&gt;#E8E8E8&lt;/color&gt;&#10;&#10;    &lt;!-- Semantic night mapping --&gt;&#10;    &lt;color name=&quot;colorBackground&quot;&gt;@color/black&lt;/color&gt;&#10;    &lt;color name=&quot;colorSurface&quot;&gt;@color/gray100&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnBackground&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSurface&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;colorPrimary&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnPrimary&quot;&gt;@color/black&lt;/color&gt;&#10;    &lt;color name=&quot;colorBorder&quot;&gt;@color/gray300&lt;/color&gt;&#10;    &lt;color name=&quot;colorSecondary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSecondary&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;colorSecondaryContainer&quot;&gt;#2C2C2C&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSecondaryContainer&quot;&gt;#E8E8E8&lt;/color&gt;&#10;    &lt;color name=&quot;colorRipple&quot;&gt;#66FFFFFF&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.FrontendJava&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Customize your dark theme here. --&gt;&#10;        &lt;!-- &lt;item name=&quot;colorPrimary&quot;&gt;@color/my_dark_primary&lt;/item&gt; --&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.FrontendJava&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Customize your dark theme here. --&gt;&#10;        &lt;!-- &lt;item name=&quot;colorPrimary&quot;&gt;@color/my_dark_primary&lt;/item&gt; --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/colorOnPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/colorSurface&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/colorOnSurface&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/colorBackground&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnBackground&quot;&gt;@color/colorOnBackground&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;toolbarStyle&quot;&gt;@style/Widget.FrontendJava.Toolbar&lt;/item&gt;&#10;        &lt;item name=&quot;materialCardViewStyle&quot;&gt;@style/Widget.FrontendJava.Card&lt;/item&gt;&#10;        &lt;item name=&quot;android:listDivider&quot;&gt;@drawable/divider_mono&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;Theme.FrontendJava&quot; parent=&quot;Base.Theme.FrontendJava&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Monochrome palette --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;gray50&quot;&gt;#FAFAFA&lt;/color&gt;&#10;    &lt;color name=&quot;gray100&quot;&gt;#F5F5F5&lt;/color&gt;&#10;    &lt;color name=&quot;gray200&quot;&gt;#EEEEEE&lt;/color&gt;&#10;    &lt;color name=&quot;gray300&quot;&gt;#E0E0E0&lt;/color&gt;&#10;    &lt;color name=&quot;gray600&quot;&gt;#757575&lt;/color&gt;&#10;    &lt;color name=&quot;gray800&quot;&gt;#333333&lt;/color&gt;&#10;    &lt;color name=&quot;gray900&quot;&gt;#111111&lt;/color&gt;&#10;&#10;    &lt;!-- Semantic --&gt;&#10;    &lt;color name=&quot;colorBackground&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;colorSurface&quot;&gt;@color/gray100&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnBackground&quot;&gt;@color/black&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSurface&quot;&gt;@color/black&lt;/color&gt;&#10;    &lt;color name=&quot;colorPrimary&quot;&gt;@color/black&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/color&gt;&#10;    &lt;color name=&quot;colorBorder&quot;&gt;@color/gray300&lt;/color&gt;&#10;    &lt;color name=&quot;colorSecondary&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSecondary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;colorSecondaryContainer&quot;&gt;#E0E0E0&lt;/color&gt;&#10;    &lt;color name=&quot;colorOnSecondaryContainer&quot;&gt;#111111&lt;/color&gt;&#10;    &lt;color name=&quot;colorRipple&quot;&gt;#33000000&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Base.Theme.FrontendJava&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Customize your light theme here. --&gt;&#10;        &lt;!-- &lt;item name=&quot;colorPrimary&quot;&gt;@color/my_light_primary&lt;/item&gt; --&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.FrontendJava&quot; parent=&quot;Base.Theme.FrontendJava&quot; /&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Monochrome base theme --&gt;&#10;    &lt;style name=&quot;Base.Theme.FrontendJava&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/colorOnPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/colorSurface&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/colorOnSurface&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/colorBackground&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnBackground&quot;&gt;@color/colorOnBackground&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;toolbarStyle&quot;&gt;@style/Widget.FrontendJava.Toolbar&lt;/item&gt;&#10;        &lt;item name=&quot;materialCardViewStyle&quot;&gt;@style/Widget.FrontendJava.Card&lt;/item&gt;&#10;        &lt;item name=&quot;android:listDivider&quot;&gt;@drawable/divider_mono&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Theme.FrontendJava&quot; parent=&quot;Base.Theme.FrontendJava&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Widget.FrontendJava.Toolbar&quot; parent=&quot;Widget.Material3.Toolbar&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/colorBackground&lt;/item&gt;&#10;        &lt;item name=&quot;titleTextColor&quot;&gt;@color/colorOnBackground&lt;/item&gt;&#10;        &lt;item name=&quot;subtitleTextColor&quot;&gt;@color/colorOnBackground&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.FrontendJava.Card&quot; parent=&quot;Widget.Material3.CardView.Elevated&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@color/colorSurface&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TextAppearance.FrontendJava.Title&quot; parent=&quot;TextAppearance.Material3.TitleMedium&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/colorOnSurface&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;TextAppearance.FrontendJava.Body&quot; parent=&quot;TextAppearance.Material3.BodyMedium&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/colorOnSurface&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.8.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;appcompat = &quot;1.7.0&quot;&#10;material = &quot;1.12.0&quot;&#10;activity = &quot;1.10.1&quot;&#10;constraintlayout = &quot;2.2.1&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;gson = &quot;2.11.0&quot;&#10;recyclerview = &quot;1.3.2&quot;&#10;cardview = &quot;1.0.0&quot;&#10;&#10;[libraries]&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;ext-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;activity = { group = &quot;androidx.activity&quot;, name = &quot;activity&quot;, version.ref = &quot;activity&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofitGson = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-gson&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttpLogging = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;recyclerview = { group = &quot;androidx.recyclerview&quot;, name = &quot;recyclerview&quot;, version.ref = &quot;recyclerview&quot; }&#10;cardview = { group = &quot;androidx.cardview&quot;, name = &quot;cardview&quot;, version.ref = &quot;cardview&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.8.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;appcompat = &quot;1.7.0&quot;&#10;material = &quot;1.12.0&quot;&#10;activity = &quot;1.10.1&quot;&#10;constraintlayout = &quot;2.2.1&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;gson = &quot;2.11.0&quot;&#10;recyclerview = &quot;1.3.2&quot;&#10;cardview = &quot;1.0.0&quot;&#10;glide = &quot;4.16.0&quot;&#10;swiperefresh = &quot;1.1.0&quot;&#10;shimmer = &quot;0.5.0&quot;&#10;&#10;[libraries]&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;ext-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;activity = { group = &quot;androidx.activity&quot;, name = &quot;activity&quot;, version.ref = &quot;activity&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofitGson = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-gson&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttpLogging = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;recyclerview = { group = &quot;androidx.recyclerview&quot;, name = &quot;recyclerview&quot;, version.ref = &quot;recyclerview&quot; }&#10;cardview = { group = &quot;androidx.cardview&quot;, name = &quot;cardview&quot;, version.ref = &quot;cardview&quot; }&#10;glide = { group = &quot;com.github.bumptech.glide&quot;, name = &quot;glide&quot;, version.ref = &quot;glide&quot; }&#10;glideCompiler = { group = &quot;com.github.bumptech.glide&quot;, name = &quot;compiler&quot;, version.ref = &quot;glide&quot; }&#10;swiperefreshlayout = { group = &quot;androidx.swiperefreshlayout&quot;, name = &quot;swiperefreshlayout&quot;, version.ref = &quot;swiperefresh&quot; }&#10;shimmer = { group = &quot;com.facebook.shimmer&quot;, name = &quot;shimmer&quot;, version.ref = &quot;shimmer&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>