<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.FrontendJava&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.FrontendJava&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/MainActivity.java" />
              <option name="originalContent" value="package com.example.frontendjava;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.frontendjava;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.frontendjava.api.ActeurApiService;&#10;import com.example.frontendjava.api.RetrofitClient;&#10;import com.example.frontendjava.model.Acteur;&#10;import com.example.frontendjava.model.ActeurUpdate;&#10;import com.example.frontendjava.ui.ActeurAdapter;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class MainActivity extends AppCompatActivity implements ActeurAdapter.OnActeurInteractionListener {&#10;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private TextView textError;&#10;    private ActeurAdapter adapter;&#10;    private FloatingActionButton fabAdd;&#10;    private ActeurApiService service;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        recyclerView = findViewById(R.id.recyclerActeurs);&#10;        progressBar = findViewById(R.id.progressBar);&#10;        textError = findViewById(R.id.textError);&#10;        fabAdd = findViewById(R.id.fabAdd);&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new ActeurAdapter();&#10;        adapter.setListener(this);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        service = RetrofitClient.getActeurService();&#10;&#10;        fabAdd.setOnClickListener(v -&gt; openActeurDialog(null));&#10;&#10;        fetchActeurs();&#10;    }&#10;&#10;    private void fetchActeurs() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        textError.setVisibility(View.GONE);&#10;        service.getActeurs().enqueue(new Callback&lt;List&lt;Acteur&gt;&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;List&lt;Acteur&gt;&gt; call, Response&lt;List&lt;Acteur&gt;&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    adapter.setData(response.body());&#10;                } else {&#10;                    showError(&quot;Réponse serveur: &quot; + response.code());&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;List&lt;Acteur&gt;&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                showError(&quot;Erreur réseau: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void openActeurDialog(Acteur existing) {&#10;        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_acteur, null, false);&#10;        EditText inputId = dialogView.findViewById(R.id.inputId);&#10;        EditText inputName = dialogView.findViewById(R.id.inputName);&#10;        EditText inputBio = dialogView.findViewById(R.id.inputBio);&#10;        EditText inputPicture = dialogView.findViewById(R.id.inputPicture);&#10;&#10;        boolean isEdit = existing != null;&#10;        if (isEdit) {&#10;            inputId.setText(String.valueOf(existing.getId()));&#10;            inputId.setEnabled(false); // id not editable&#10;            inputName.setText(existing.getName());&#10;            inputBio.setText(existing.getBio());&#10;            inputPicture.setText(existing.getPicture());&#10;        }&#10;&#10;        AlertDialog dialog = new AlertDialog.Builder(this)&#10;                .setTitle(isEdit ? &quot;Modifier acteur&quot; : &quot;Nouvel acteur&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(isEdit ? &quot;Mettre à jour&quot; : &quot;Créer&quot;, null) // set later to prevent auto-dismiss on validation errors&#10;                .setNegativeButton(&quot;Annuler&quot;, (d, w) -&gt; d.dismiss())&#10;                .create();&#10;&#10;        dialog.setOnShowListener(d -&gt; {&#10;            dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(v -&gt; {&#10;                String idStr = inputId.getText().toString().trim();&#10;                String name = inputName.getText().toString().trim();&#10;                String bio = inputBio.getText().toString().trim();&#10;                String picture = inputPicture.getText().toString().trim();&#10;&#10;                if (!isEdit &amp;&amp; idStr.isEmpty()) { inputId.setError(&quot;Requis&quot;); return; }&#10;                if (name.isEmpty()) { inputName.setError(&quot;Requis&quot;); return; }&#10;                if (bio.isEmpty()) { inputBio.setError(&quot;Requis&quot;); return; }&#10;                if (picture.isEmpty()) { inputPicture.setError(&quot;Requis&quot;); return; }&#10;&#10;                if (isEdit) {&#10;                    updateActeur(existing.getId(), new ActeurUpdate(name, bio, picture), dialog);&#10;                } else {&#10;                    int id;&#10;                    try { id = Integer.parseInt(idStr); } catch (NumberFormatException e) { inputId.setError(&quot;Nombre&quot;); return; }&#10;                    createActeur(new Acteur(id, name, bio, picture), dialog);&#10;                }&#10;            });&#10;        });&#10;&#10;        dialog.show();&#10;    }&#10;&#10;    private void createActeur(Acteur acteur, AlertDialog dialog) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.createActeur(acteur).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Créé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 409) {&#10;                    Toast.makeText(MainActivity.this, &quot;ID existe déjà&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateActeur(int id, ActeurUpdate update, AlertDialog dialog) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.updateActeur(id, update).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    dialog.dismiss();&#10;                    Toast.makeText(MainActivity.this, &quot;Mis à jour&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Introuvable&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void confirmDelete(Acteur acteur) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Supprimer&quot;)&#10;                .setMessage(&quot;Supprimer l'acteur &quot; + acteur.getName() + &quot; ?&quot;)&#10;                .setPositiveButton(&quot;Oui&quot;, (d, w) -&gt; deleteActeur(acteur.getId()))&#10;                .setNegativeButton(&quot;Non&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void deleteActeur(int id) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        service.deleteActeur(id).enqueue(new Callback&lt;Acteur&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Acteur&gt; call, Response&lt;Acteur&gt; response) {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (response.isSuccessful()) {&#10;                    Toast.makeText(MainActivity.this, &quot;Supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                    fetchActeurs();&#10;                } else if (response.code() == 404) {&#10;                    Toast.makeText(MainActivity.this, &quot;Déjà supprimé&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Erreur: &quot; + response.code(), Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override&#10;            public void onFailure(Call&lt;Acteur&gt; call, Throwable t) {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(MainActivity.this, &quot;Erreur réseau: &quot; + t.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showError(String msg) {&#10;        textError.setText(msg);&#10;        textError.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    // Adapter Callbacks&#10;    @Override&#10;    public void onEdit(Acteur acteur) {&#10;        openActeurDialog(acteur);&#10;    }&#10;&#10;    @Override&#10;    public void onDelete(Acteur acteur) {&#10;        confirmDelete(acteur);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/api/ActeurApiService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/api/ActeurApiService.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.frontendjava.api;&#10;&#10;import com.example.frontendjava.model.Acteur;&#10;import com.example.frontendjava.model.ActeurUpdate;&#10;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.http.Body;&#10;import retrofit2.http.DELETE;&#10;import retrofit2.http.GET;&#10;import retrofit2.http.POST;&#10;import retrofit2.http.PUT;&#10;import retrofit2.http.Path;&#10;&#10;public interface ActeurApiService {&#10;    @GET(&quot;/acteurs&quot;)&#10;    Call&lt;List&lt;Acteur&gt;&gt; getActeurs();&#10;&#10;    @GET(&quot;/acteur/{id}&quot;)&#10;    Call&lt;Acteur&gt; getActeur(@Path(&quot;id&quot;) int id);&#10;&#10;    @POST(&quot;/acteur/&quot;)&#10;    Call&lt;Acteur&gt; createActeur(@Body Acteur acteur);&#10;&#10;    @PUT(&quot;/acteur/{id}&quot;)&#10;    Call&lt;Acteur&gt; updateActeur(@Path(&quot;id&quot;) int id, @Body ActeurUpdate acteur);&#10;&#10;    @DELETE(&quot;/acteur/{id}&quot;)&#10;    Call&lt;Acteur&gt; deleteActeur(@Path(&quot;id&quot;) int id);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/api/RetrofitClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/api/RetrofitClient.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.frontendjava.api;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.logging.HttpLoggingInterceptor;&#10;import retrofit2.Retrofit;&#10;import retrofit2.converter.gson.GsonConverterFactory;&#10;&#10;public class RetrofitClient {&#10;    private static final String BASE_URL = &quot;http://10.0.2.2:8000/&quot;; // Trailing slash required&#10;    private static Retrofit retrofitInstance;&#10;&#10;    private RetrofitClient() {}&#10;&#10;    public static Retrofit getInstance() {&#10;        if (retrofitInstance == null) {&#10;            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;            logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;            OkHttpClient client = new OkHttpClient.Builder()&#10;                    .addInterceptor(logging)&#10;                    .build();&#10;&#10;            retrofitInstance = new Retrofit.Builder()&#10;                    .baseUrl(BASE_URL)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .client(client)&#10;                    .build();&#10;        }&#10;        return retrofitInstance;&#10;    }&#10;&#10;    public static ActeurApiService getActeurService() {&#10;        return getInstance().create(ActeurApiService.class);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/model/Acteur.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/model/Acteur.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.frontendjava.model;&#10;&#10;public class Acteur {&#10;    private int id;&#10;    private String name;&#10;    private String bio;&#10;    private String picture;&#10;&#10;    // Default constructor&#10;    public Acteur() {}&#10;&#10;    // Full-args constructor&#10;    public Acteur(int id, String name, String bio, String picture) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.bio = bio;&#10;        this.picture = picture;&#10;    }&#10;&#10;    // Getters&#10;    public int getId() { return id; }&#10;    public String getName() { return name; }&#10;    public String getBio() { return bio; }&#10;    public String getPicture() { return picture; }&#10;&#10;    // Setters&#10;    public void setId(int id) { this.id = id; }&#10;    public void setName(String name) { this.name = name; }&#10;    public void setBio(String bio) { this.bio = bio; }&#10;    public void setPicture(String picture) { this.picture = picture; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/model/ActeurUpdate.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/model/ActeurUpdate.java" />
              <option name="updatedContent" value="package com.example.frontendjava.model;&#10;&#10;public class ActeurUpdate {&#10;    private String name;&#10;    private String bio;&#10;    private String picture;&#10;&#10;    public ActeurUpdate(String name, String bio, String picture) {&#10;        this.name = name;&#10;        this.bio = bio;&#10;        this.picture = picture;&#10;    }&#10;&#10;    public String getName() { return name; }&#10;    public String getBio() { return bio; }&#10;    public String getPicture() { return picture; }&#10;&#10;    public void setName(String name) { this.name = name; }&#10;    public void setBio(String bio) { this.bio = bio; }&#10;    public void setPicture(String picture) { this.picture = picture; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/ui/ActeurAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/java/com/example/frontendjava/ui/ActeurAdapter.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.frontendjava.ui;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.frontendjava.R;&#10;import com.example.frontendjava.model.Acteur;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ActeurAdapter extends RecyclerView.Adapter&lt;ActeurAdapter.ActeurViewHolder&gt; {&#10;&#10;    public interface OnActeurInteractionListener {&#10;        void onEdit(Acteur acteur);&#10;        void onDelete(Acteur acteur);&#10;    }&#10;&#10;    private final List&lt;Acteur&gt; data = new ArrayList&lt;&gt;();&#10;    private OnActeurInteractionListener listener;&#10;&#10;    public void setListener(OnActeurInteractionListener l) { this.listener = l; }&#10;&#10;    public void setData(List&lt;Acteur&gt; nouveaux) {&#10;        data.clear();&#10;        if (nouveaux != null) {&#10;            data.addAll(nouveaux);&#10;        }&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ActeurViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_acteur, parent, false);&#10;        return new ActeurViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ActeurViewHolder holder, int position) {&#10;        Acteur a = data.get(position);&#10;        holder.textName.setText(a.getName());&#10;        holder.textBio.setText(a.getBio());&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) listener.onEdit(a);&#10;        });&#10;        holder.itemView.setOnLongClickListener(v -&gt; {&#10;            if (listener != null) listener.onDelete(a);&#10;            return true;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return data.size();&#10;    }&#10;&#10;    static class ActeurViewHolder extends RecyclerView.ViewHolder {&#10;        TextView textName;&#10;        TextView textBio;&#10;        ActeurViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            textName = itemView.findViewById(R.id.textName);&#10;            textBio = itemView.findViewById(R.id.textBio);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Hello World!&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;@android:style/Widget.DeviceDefault.Light.ProgressBar.Large&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;/&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerActeurs&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        tools:listitem=&quot;@layout/item_acteur&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textError&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        tools:text=&quot;Erreur de chargement&quot;/&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabAdd&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:contentDescription=&quot;Ajouter&quot;&#10;        app:srcCompat=&quot;@android:drawable/ic_input_add&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/dialog_acteur.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/dialog_acteur.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputId&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;ID (entier)&quot;&#10;            android:inputType=&quot;number&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Nom&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputBio&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Bio&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:minLines=&quot;2&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputPicture&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Picture URL&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/item_acteur.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/app/src/main/res/layout/item_acteur.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    card_view:cardCornerRadius=&quot;8dp&quot;&#10;    card_view:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;12dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textName&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:text=&quot;Nom&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textBio&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:text=&quot;Bio&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FrontendJava/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FrontendJava/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.8.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;appcompat = &quot;1.7.0&quot;&#10;material = &quot;1.12.0&quot;&#10;activity = &quot;1.10.1&quot;&#10;constraintlayout = &quot;2.2.1&quot;&#10;&#10;[libraries]&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;ext-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;activity = { group = &quot;androidx.activity&quot;, name = &quot;activity&quot;, version.ref = &quot;activity&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.8.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;appcompat = &quot;1.7.0&quot;&#10;material = &quot;1.12.0&quot;&#10;activity = &quot;1.10.1&quot;&#10;constraintlayout = &quot;2.2.1&quot;&#10;retrofit = &quot;2.11.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;gson = &quot;2.11.0&quot;&#10;recyclerview = &quot;1.3.2&quot;&#10;cardview = &quot;1.0.0&quot;&#10;&#10;[libraries]&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;ext-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;activity = { group = &quot;androidx.activity&quot;, name = &quot;activity&quot;, version.ref = &quot;activity&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofitGson = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-gson&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttpLogging = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;recyclerview = { group = &quot;androidx.recyclerview&quot;, name = &quot;recyclerview&quot;, version.ref = &quot;recyclerview&quot; }&#10;cardview = { group = &quot;androidx.cardview&quot;, name = &quot;cardview&quot;, version.ref = &quot;cardview&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>